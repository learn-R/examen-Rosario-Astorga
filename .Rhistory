survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(variacion_cuidados ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(variacion_cuidados ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(variacion_cuidados ~ estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(variacion_cuidados ~ sexo + estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(variacion_cuidados ~ sexo + edad + trabajo_productivo + estado_sm + variacion_td, family = binomial(link = "logit"), data = datos_proc)
modelo6survey <- svyglm(variacion_cuidados ~ sexo + edad + trabajo_productivo + estado_sm  + variacion_td, family = binomial(link = "logit"), design = movid_objeto, data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
View(movid_objeto)
frq(MOVID_2020$c2_3)
frq(MOVID_2020$f2)
frq(MOVID_2020$g1)
frq(MOVID_2020$edad)
frq(MOVID_2020$sexo)
frq(MOVID_2020$f1)
movid_proc %>% select(variacion_cuidados) %$%
print(dfSummary(., headings = FALSE, method = "render", varnumbers = F, lang = "es"))
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
movid_proc %>% select(variacion_cuidados) %$%
print(dfSummary(., headings = FALSE, method = "render", varnumbers = F, lang = "es"))
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
summarytools,
car) #Para recodificar manteniendo las etiquetas
movid_proc %>% select(variacion_cuidados) %$%
print(dfSummary(., headings = FALSE, method = "render", varnumbers = F, lang = "es"))
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
summarytools,
car) #Para recodificar manteniendo las etiquetas
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, estado_sm = c2_3, variacion_td = f2,
variacion_cuidados = f2, trabajo_productivo = g1, sexo, edad)
movid_proc <- movid %>%
mutate_at(vars(sexo, variacion_td, variacion_cuidados, estado_sm), funs(as.numeric(.))) %>%
mutate(estado_sm = car::recode(.$estado_sm, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
variacion_td = car::recode(.$variacion_td, recodes = "c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"),
variacion_cuidados = car::recode(.$variacion_cuidados, recodes = "c(1,2)=0; 3=1; c(8,9)= 'No sabe/No responde'")) %>%
mutate_at(vars(edad, estado_sm, sexo, variacion_td, trabajo_productivo, variacion_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
View(movid_proc)
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(variacion_cuidados ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(variacion_cuidados ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(variacion_cuidados ~ estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(variacion_cuidados ~ sexo + estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(variacion_cuidados ~ sexo + edad + trabajo_productivo + estado_sm + variacion_td, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
modelo0 <- glm(variacion_td ~ 1, family = binomial(link = "logit"), data = datos_proc)
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, estado_sm = c2_3, variacion_td = f2,
variacion_cuidados = f2, trabajo_productivo = g1, sexo, edad)
movid_proc <- movid %>%
mutate_at(vars(sexo, variacion_td, variacion_cuidados, estado_sm), funs(as.numeric(.))) %>%
mutate(estado_sm = car::recode(.$estado_sm, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
variacion_td = car::recode(.$variacion_td, recodes = "c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"),
variacion_cuidados = car::recode(.$variacion_cuidados, recodes = "c(1,2)=0; 3=1; c(8,9)= 'No sabe/No responde'")) %>%
mutate_at(vars(edad, estado_sm, sexo, variacion_td, trabajo_productivo, variacion_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(variacion_td ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(variacion_td ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(variacion_td ~ estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(variacion_td ~ sexo + estado_sm, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(variacion_td ~ sexo + edad + trabajo_productivo + estado_sm + variacion_cuidados, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
modelo0 <- glm(estado_sm ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(estado_sm ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(estado_sm ~ variacion_td, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(estado_sm ~ sexo + variacion_td, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(estado_sm ~ sexo + edad + trabajo_productivo + variacion_td + variacion_cuidados, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, c2_1, c2_2, c2_3, c2_4, trabajo_domestico = f2,
trabajo_cuidados = f2, trabajo_productivo = g1, sexo, edad)
movid <- movid %>%
mutate_at(vars(starts_with("c2")),~as.numeric(.)) %>%
rowwise() %>%
mutate(salud_mental = sum(c2_1,c2_2,c2_3,c2_4, na.rm = T))
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, trabajo_cuidados), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
View(movid)
View(movid)
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, salud_mental = c2_3, trabajo_domestico = f2,
trabajo_cuidados = f2, trabajo_productivo = g1, sexo, edad)
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, trabajo_cuidados), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, trabajo_cuidados, salud_mental), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(salud_mental ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(salud_mental ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(salud_mental ~ trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(salud_mental ~ sexo + trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico +  trabajo_cuidados, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, salud_mental = c2_3, trabajo_domestico = f2,
trabajo_cuidados = f2, trabajo_productivo = g1, sexo, edad)
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, trabajo_cuidados, salud_mental), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Menor trabajo doméstico'; 3='Mayor trabajo doméstico'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(salud_mental ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(salud_mental ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(salud_mental ~ trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(salud_mental ~ sexo + trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico +  trabajo_cuidados, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
View(datos_proc)
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, salud_mental = c2_3, trabajo_domestico = f2,
trabajo_cuidados = f2, trabajo_productivo = g1, sexo, edad, contagio = d6)
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, trabajo_cuidados, salud_mental, contagio), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)='No sabe/No responde'"), as.factor = T, levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Menor trabajo doméstico'; 3='Mayor trabajo doméstico'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó'; 3='Aumentó'; c(8,9)= 'No sabe/No responde'"), levels = c("No sabe/No responde", "Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados, contagio), funs(forcats::as_factor(.)))#Transformo la variable edad, trabaja y riesgo_factor en un factor
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
rmdformats, #Proporciona varios formatos de salida HTML de estilos únicos y atractivos
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo0 <- glm(salud_mental ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(salud_mental ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(salud_mental ~ trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(salud_mental ~ sexo + trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico +  trabajo_cuidados, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
modelo0 <- glm(salud_mental ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(salud_mental ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(salud_mental ~ trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(salud_mental ~ sexo + trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo6 <- glm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico +  trabajo_cuidados + contagio, family = binomial(link = "logit"), data = datos_proc)
sjPlot::tab_model(list(modelo0,modelo3,modelo4,modelo5,modelo6),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 3", "Modelo 4", "Modelo 5", "Modelo 6"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, salud_mental = c2_3, trabajo_domestico = f2,
trabajo_cuidados = f2, trabajo_productivo = g1, sexo, edad, estado_civil = a6)
movid_proc <- movid %>%
movid_proc <- movid %>%
pacman::p_load(tidyverse, #Universo de paquetes
sjmisc, #Para explorar datos
dplyr, #Para manipular datos
haven, #cargar y exportar bases de datos en formatos .sav y .dta
car) #Para recodificar manteniendo las etiquetas
MOVID_2020 <- read_dta(url("https://github.com/learn-R/examen-Rosario-Astorga/raw/main/input/data/MOVID-IMPACT.dta"))
movid <- select(MOVID_2020, factor_expansion, entrevistado, salud_mental = c2_3, trabajo_domestico = f2,
trabajo_productivo = g1, trabajo_cuidados = f1, sexo, edad)
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, salud_mental, trabajo_cuidados), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)=NA"), as.factor = T,
levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
trabajo_productivo = car::recode(.$trabajo_productivo, recodes = c("1 = 'Sí trabajó'; 2 = 'No trabajó'"), as.factor = T,  levels = c('Sí trabajó', 'No trabajó')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo cuidados'; 3='Aumentó trabajo cuidados'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo doméstico'; 3='Aumentó trabajo doméstico'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo las variables en un factor para que mi modelo se estime de manera correcta,
frq(MOVID_2020$g1)
View(movid)
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, salud_mental, trabajo_cuidados, tra), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)=NA"), as.factor = T,
levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
trabajo_productivo = car::recode(.$trabajo_productivo, recodes = c("1 = 'Sí trabajó'; 2 = 'No trabajó'"), as.factor = T,  levels = c('Sí trabajó', 'No trabajó')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo cuidados'; 3='Aumentó trabajo cuidados'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo doméstico'; 3='Aumentó trabajo doméstico'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo las variables en un factor para que mi modelo se estime de manera correcta,
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, salud_mental, trabajo_cuidados, tra), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)=NA"), as.factor = T,
levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
trabajo_productivo = car::recode(.$trabajo_productivo, recodes = c("1 = 'Sí trabajó'; 2 = 'No trabajó'"), as.factor = T,  levels = c('Sí trabajó', 'No trabajó')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo cuidados'; 3='Aumentó trabajo cuidados'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo doméstico'; 3='Aumentó trabajo doméstico'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo las variables en un factor para que mi modelo se estime de manera correcta,
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, salud_mental, trabajo_cuidados, trabajo_productivo), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)=NA"), as.factor = T,
levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
trabajo_productivo = car::recode(.$trabajo_productivo, recodes = c("1 = 'Sí trabajó'; 2 = 'No trabajó'"), as.factor = T,  levels = c('Sí trabajó', 'No trabajó')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo cuidados'; 3='Aumentó trabajo cuidados'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo doméstico'; 3='Aumentó trabajo doméstico'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo las variables en un factor para que mi modelo se estime de manera correcta,
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
movid_proc <- movid %>%
mutate_at(vars(sexo, trabajo_domestico, salud_mental, trabajo_cuidados, trabajo_productivo), funs(as.numeric(.))) %>%
filter(entrevistado == 1) %>%
mutate(salud_mental = car::recode(.$salud_mental, recodes = c("1='No se ha sentido deprimido'; c(2,3,4)='Si se ha sentido deprimido'; c(8,9)=NA"), as.factor = T,
levels = c('No se ha sentido deprimido', 'Si se ha sentido deprimido')),
sexo = car::recode(.$sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'"), as.factor = T,  levels = c('Hombre', 'Mujer')),
trabajo_productivo = car::recode(.$trabajo_productivo, recodes = c("1 = 'Sí trabajó'; 2 = 'No trabajó'"), as.factor = T,  levels = c('Sí trabajó', 'No trabajó')),
edad = car::recode(.$edad, recodes = c("18:39='Joven';40:60='Adulto'; 61:hi='Adulto mayor'"),
as.factor = T, levels = c("Joven", "Adulto", "Adulto mayor")),
trabajo_cuidados = car::recode(.$trabajo_cuidados, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo cuidados'; 3='Aumentó trabajo cuidados'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó")),
trabajo_domestico = car::recode(.$trabajo_domestico, recodes = c("c(1,2)='Se mantuvo o disminuyó trabajo doméstico'; 3='Aumentó trabajo doméstico'; c(8,9)= NA"),
levels = c("Se mantuvo o disminuyó", "Aumentó"))) %>%
mutate_at(vars(edad, sexo, trabajo_domestico, trabajo_productivo, trabajo_cuidados), funs(forcats::as_factor(.)))#Transformo las variables en un factor para que mi modelo se estime de manera correcta,
saveRDS(movid_proc, file = "output/datos/datos_proc.rds") #Guardamos este único set de datos en datos_proc.rds con los datos procesados
knitr::opts_chunk$set(echo = F, warning = F, message = F)
Sys.setlocale("LC_CTYPE", "spanish")
options(OutDec= ",", digits = 3)
pacman::p_load(dplyr, #Para manipular datos
tidyverse, #Universo de paquetes
magrittr, #Para utilizar el operador pipe
srvyr, #Para trabajar con muestras complejas
survey,#para estimar los modelos con peso muestral
remotes, #Para instalar texreg desde GitHub
texreg, #Para crear tablas en formato publicable
sjPlot) #Para visualizar los datos
datos_proc <- readRDS("../output/datos/datos_proc.rds")
movid_objeto <- datos_proc %>% #Creamos un nuevo objeto llamado movid_objeto con la información de datos_proc
as_survey_design(ids = 1, #Aplicamos diseño muestral, especificando los ids a partir de 1 (entrevistado seleccionado),
weights = factor_expansion) #y el ponderador con factor de expansión
modelo1 <- glm(salud_mental ~ 1, family = binomial(link = "logit"), data = datos_proc)
modelo2 <- glm(salud_mental ~ sexo, family = binomial(link = "logit"), data = datos_proc)
modelo3 <- glm(salud_mental ~ trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo4 <- glm(salud_mental ~ sexo + trabajo_domestico, family = binomial(link = "logit"), data = datos_proc)
modelo5 <- glm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico + trabajo_cuidados, family = binomial(link = "logit"), data = datos_proc)
modelo5survey <- svyglm(salud_mental ~ sexo + edad + trabajo_productivo + trabajo_domestico + trabajo_cuidados, family = binomial(link = "logit"), design = movid_objeto, data = datos_proc)
sjPlot::tab_model(list(modelo1,modelo2,modelo3,modelo4,modelo5),
string.intercept = "(Intercepto)",
string.pred = "Predictores",
string.est = "Estimación (OR)",
p.style = "stars",
collapse.ci = T,
digits = 3,
dv.labels = c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4", "Modelo 5"),
transform = "exp",
show.reflvl = TRUE,
encoding = "UTF-8",
lang = "es")
View(movid_proc)
